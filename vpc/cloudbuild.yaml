steps:
  - id: 'branch name'
    name: 'alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "***********************"
        echo "$BRANCH_NAME"
        echo "***********************"
  # [START create bucket to store state if it does not exist already]

  - id: 'create bucket'
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    entrypoint: '/bin/bash'
    args:
      - '-c'
      - |
        buckets=$(gsutil ls -p $PROJECT_ID | grep ${REPO_NAME}-tfstate-${PROJECT_ID})
        if [ -z "$buckets" ]; then
          gsutil mb -b on -p $PROJECT_ID gs://${REPO_NAME}-tfstate-${PROJECT_ID}
        fi
  # [START tf-init]
  - id: 'tf init'
    name: 'hashicorp/terraform:0.14.2'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        terraform -chdir=vpc/ init -backend-config=bucket=${REPO_NAME}-tfstate-${PROJECT_ID} -backend-config=prefix=${REPO_NAME}-terraform-state
  # [END tf-init]

  # [START tf-plan]
  - id: 'tf plan'
    name: 'hashicorp/terraform:0.14.2'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
          terraform -chdir=vpc/ plan -out=iac-plan
  # [END tf-plan]

  # [START tf-apply]
  - id: 'tf apply'
    name: 'hashicorp/terraform:0.14.2'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
          terraform -chdir=vpc/ apply --auto-approve iac-plan
  # [END tf-apply]
logsBucket: 'gs://${REPO_NAME}-build-logs-${PROJECT_ID}'
